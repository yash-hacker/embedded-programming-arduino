#include <PS2X_lib.h>  //for v1.6
#include <Encoder.h>
PS2X ps2x; // create PS2 Controller Class
#define aspeed_3 200
#define aspeed_1 200
#define aspeed_2 200
#define aspeed_4 200
//right now, the library does NOT support hot pluggable controllers, meaning
//you must always either restart your Arduino after you conect the controller,
//or call config_gamepad(pins) again after connecting the controller.
/*int error = 0;
byte type = 0;
byte vibrate = 0;*/
byte slow_speed_1 = 210;
byte slow_speed_3 = 255;
byte right;
byte left; 
int rev_pos_1=260;
int rev_pos_3=260;
int stop_pos_1=260;
int stop_pos_3=260;
long pos1=0;
long pos2=0;
long pos3=0;
long pos4=0;
long last_pos1=0;
long last_pos2=0;
long last_pos3=0;
long last_pos4=0;
/*int c=0;
int turn1 =0;
int turn2=0;*/

#define trig 9
#define echo 10
int duration=0;
int distance=0;

#define d 2000
#define pwm_1 5
#define dir_1 44
#define pwm_2 6
#define dir_2 45
#define pwm_3 7
#define dir_3 42
#define pwm_4 8
#define dir_4 43
Encoder enc1(3,2);
Encoder enc2(18,22);
Encoder enc3(19,20);
Encoder enc4(21,15);

void setup() {
  Serial.begin(57600);
  pinMode(pwm_1, OUTPUT);
  pinMode(dir_1, OUTPUT);
  pinMode(pwm_2, OUTPUT);
  pinMode(dir_2, OUTPUT);
  pinMode(pwm_3, OUTPUT);
  pinMode(dir_3, OUTPUT);
  pinMode(pwm_4, OUTPUT);
  pinMode(dir_4, OUTPUT);
  digitalWrite(dir_1,HIGH);
  digitalWrite(dir_2,LOW);
  digitalWrite(dir_3,LOW);
  digitalWrite(dir_4,HIGH);
  digitalWrite(pwm_1,LOW);
  digitalWrite(pwm_2,LOW);
  digitalWrite(pwm_3,LOW);
  digitalWrite(pwm_4,LOW);

  pinMode(trig, OUTPUT);
  pinMode(echo,INPUT);

  
  //CHANGES for v1.6 HERE!!! **************PAY ATTENTION*************


 /* error = ps2x.config_gamepad(53, 11, 10, 51, false, false); //setup pins and settings:  GamePad(clock, command, attention, data, Pressures?, Rumble?) check for error

  if (error == 0) {
    Serial.println("Found Controller, configured successful");
    Serial.println("Try out all the buttons, X will vibrate the controller, faster as you press harder;");
    Serial.println("holding L1 or R1 will print out the analog stick values.");
    Serial.println("Go to www.billporter.info for updates and to report bugs.");
  }

  else if (error == 1)
    Serial.println("No controller found, check wiring, see readme.txt to enable debug. visit www.billporter.info for troubleshooting tips");

  else if (error == 2)
    Serial.println("Controller found but not accepting commands. see readme.txt to enable debug. Visit www.billporter.info for troubleshooting tips");

  else if (error == 3)
    Serial.println("Controller refusing to enter Pressures mode, may not support it. ");

  //Serial.print(ps2x.Analog(1), HEX);

  type   = ps2x.readType();
  switch (type)
  {
    case 0:
      Serial.println("Unknown Controller type");
      break;
    case 1:
      Serial.println("DualShock Controller Found");
      break;
    case 2:
      Serial.println("GuitarHero Controller Found");
      break;
  }*/
}

void loop()
{
     digitalWrite(dir_1,HIGH); 
     digitalWrite(dir_2,LOW); 
     digitalWrite(dir_3,LOW); 
     digitalWrite(dir_4,HIGH); 

     // position check---------------------
    right=1;
    left=1;
    digitalWrite(trig,LOW);
    delayMicroseconds(2);
    digitalWrite(trig,HIGH);
    delayMicroseconds(10);
    digitalWrite(trig,LOW);
    duration=pulseIn(echo,HIGH);
    distance=0.034*(duration/2);
    Serial.println(distance);

    if(distance >30)
    {
      right=0;
    }
    else if (distance<10)
    {
      left=0;
    }
     
     //---------------------------------
//right
      if(right==1)
      {
        analogWrite(pwm_1,aspeed_1);
     analogWrite(pwm_2,0);
     analogWrite(pwm_4,aspeed_4);
     analogWrite(pwm_3,0);
     pos1=abs(enc1.read());
     pos4=abs(enc4.read());
     while(((pos1-last_pos1)<stop_pos_1) || ((pos4-last_pos4)<stop_pos_3) )
     {
         pos1=abs(enc1.read());
         pos4=abs(enc4.read());
         Serial.println("1");
         Serial.println(pos1);
         Serial.println(pos4);
         if(!((pos1-last_pos1)<rev_pos_1))
         {
          analogWrite(pwm_1,slow_speed_1);
         }
         if(!((pos4-last_pos4)<rev_pos_3))
         {
          analogWrite(pwm_4,slow_speed_3);
         }
         
         if(!((pos1-last_pos1)<stop_pos_1))
         {
          analogWrite(pwm_1,0);
          Serial.println("stop 1");
         }
         if(!((pos4-last_pos4)<stop_pos_3))
         {
          analogWrite(pwm_4,0);
          Serial.println("stop 3");
         }
     }
      analogWrite(pwm_1,0);
      analogWrite(pwm_2,0);
      analogWrite(pwm_3,0);
      analogWrite(pwm_4,0);
      delay(200);
      }

     
      last_pos2=abs(enc2.read());
      last_pos3=abs(enc3.read());
      
      //------------------------------------------------------------
      //left
      
     if(left==1)
     {
      analogWrite(pwm_2,aspeed_2);
     analogWrite(pwm_1,0);
     analogWrite(pwm_3,aspeed_3);
     analogWrite(pwm_4,0);
     pos2=abs(enc2.read());
     pos3=abs(enc3.read());
     while(((pos2-last_pos2)<stop_pos_1) || ((pos3-last_pos3)<stop_pos_3) )
     {
         pos2=abs(enc2.read());
         pos3=abs(enc3.read());
         Serial.println("1");
         Serial.println(pos2);
         Serial.println(pos3);
         if(!((pos2-last_pos2)<rev_pos_1))
         {
          analogWrite(pwm_2,slow_speed_1);
         }
         if(!((pos3-last_pos3)<rev_pos_3))
         {
          analogWrite(pwm_3,slow_speed_3);
         }      
         if(!((pos2-last_pos2)<stop_pos_1))
         {
          analogWrite(pwm_2,0);
          Serial.println("stop 1");
         }
         if(!((pos3-last_pos3)<stop_pos_3))
         {
          analogWrite(pwm_3,0);
          Serial.println("stop 3");
         }
     }
      analogWrite(pwm_1,0);
      analogWrite(pwm_2,0);
      analogWrite(pwm_3,0);
      analogWrite(pwm_4,0);
      delay(200);
     }
      
      last_pos1=abs(enc1.read());
      last_pos4=abs(enc4.read());
}
